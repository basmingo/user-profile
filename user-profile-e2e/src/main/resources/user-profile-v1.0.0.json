{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI definition",
    "version": "v0"
  },
  "servers": [
    {
      "url": "http://localhost:8080/api/v1",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "User profile Api",
      "description": "User profile management"
    }
  ],
  "paths": {
    "/users/{userId}/details/{id}": {
      "get": {
        "tags": [
          "User profile Api"
        ],
        "summary": "Get user details by Id",
        "operationId": "getUserDetails",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Schema not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User profile Api"
        ],
        "summary": "Update user details by Id",
        "operationId": "updateUserDetails",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDetailsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Missing or invalid request body",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "User details not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Successfully updated user details",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsDto"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User profile Api"
        ],
        "summary": "Get user by Id",
        "operationId": "getUserWithDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Schema not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User profile Api"
        ],
        "summary": "Update user by Id",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Missing or invalid request body",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "200": {
            "description": "Successfully updated user",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "User profile Api"
        ],
        "summary": "Create user",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Missing or invalid request body",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "201": {
            "description": "Successfully created user",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LocalTime": {
        "type": "object",
        "properties": {
          "hour": {
            "type": "integer",
            "format": "int32"
          },
          "minute": {
            "type": "integer",
            "format": "int32"
          },
          "second": {
            "type": "integer",
            "format": "int32"
          },
          "nano": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UserDetailsDto": {
        "required": [
          "telegramId",
          "zoneId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "telegramId": {
            "pattern": "(?:@|(?:(?:(?:https?://)?t(?:elegram)?)\\.me\\/))(\\w{4,})$",
            "type": "string"
          },
          "mobilePhone": {
            "pattern": "^(\\+\\d{1,3}( )?)?((\\(\\d{3}\\))|\\d{3})[- .]?\\d{3}[- .]?\\d{4}$|^(\\+\\d{1,3}( )?)?(\\d{3}[ ]?){2}\\d{3}$|^(\\+\\d{1,3}( )?)?(\\d{3}[ ]?)(\\d{2}[ ]?){2}\\d{2}$",
            "type": "string"
          },
          "zoneId": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "rules": {
                "type": "object",
                "properties": {
                  "fixedOffset": {
                    "type": "boolean"
                  },
                  "transitions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "offsetBefore": {
                          "type": "object",
                          "properties": {
                            "totalSeconds": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "offsetAfter": {
                          "type": "object",
                          "properties": {
                            "totalSeconds": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "overlap": {
                          "type": "boolean"
                        },
                        "instant": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "duration": {
                          "type": "object",
                          "properties": {
                            "seconds": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "nano": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "negative": {
                              "type": "boolean"
                            },
                            "zero": {
                              "type": "boolean"
                            },
                            "units": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "dateBased": {
                                    "type": "boolean"
                                  },
                                  "timeBased": {
                                    "type": "boolean"
                                  },
                                  "durationEstimated": {
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "gap": {
                          "type": "boolean"
                        },
                        "dateTimeBefore": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "dateTimeAfter": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  },
                  "transitionRules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "month": {
                          "type": "string",
                          "enum": [
                            "JANUARY",
                            "FEBRUARY",
                            "MARCH",
                            "APRIL",
                            "MAY",
                            "JUNE",
                            "JULY",
                            "AUGUST",
                            "SEPTEMBER",
                            "OCTOBER",
                            "NOVEMBER",
                            "DECEMBER"
                          ]
                        },
                        "timeDefinition": {
                          "type": "string",
                          "enum": [
                            "UTC",
                            "WALL",
                            "STANDARD"
                          ]
                        },
                        "standardOffset": {
                          "type": "object",
                          "properties": {
                            "totalSeconds": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "offsetBefore": {
                          "type": "object",
                          "properties": {
                            "totalSeconds": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "offsetAfter": {
                          "type": "object",
                          "properties": {
                            "totalSeconds": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "dayOfWeek": {
                          "type": "string",
                          "enum": [
                            "MONDAY",
                            "TUESDAY",
                            "WEDNESDAY",
                            "THURSDAY",
                            "FRIDAY",
                            "SATURDAY",
                            "SUNDAY"
                          ]
                        },
                        "dayOfMonthIndicator": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "localTime": {
                          "$ref": "#/components/schemas/LocalTime"
                        },
                        "midnightEndOfDay": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Information about user details"
      },
      "UserDto": {
        "required": [
          "email",
          "firstName",
          "lastName",
          "userDetails"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "firstName": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string"
          },
          "lastName": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "userDetails": {
            "$ref": "#/components/schemas/UserDetailsDto"
          }
        },
        "description": "Information about user"
      }
    }
  }
}
